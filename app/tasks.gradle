configurations {
    ktlint
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
//     args "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/reports/ktlint/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
//    args "--android=true"
    args "--reporter=html,artifact=com.github.mcassiano:ktlint-html-reporter:0.2.0,output=${buildDir}/reports/ktlint/index.html"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

task jacocoTestReport(type: JacocoReport) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def androidExclusion = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*'
    ]

    def debugTree = (file("$project.buildDir/tmp/kotlin-classes/debug").exists()
                    ? fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: androidExclusion)
                    : fileTree(dir: "$project.buildDir/classes", excludes: androidExclusion))


    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec'
    ])
}